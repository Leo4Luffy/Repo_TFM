---
execute: 
  warning: false
  message: false
bibliography: references.bib
---

## Precisión de la predición mediante simulación con SeqBreed {.unnumbered}

Hoy en día, los métodos de predicción genómica se usan ampliamente en la mejora genética de plantas y de animales. Antes de que estos métodos sean implementados en escenarios prácticos, es importante conocer su precisión al predecir el valor de cría estimado (EBV, o GEBV al realizar la predicción utilizando SNP). En este sentido, el objetivo principal de mi trabajo de grado consistió en estudiar el efecto del número de marcadores (SNP) y de individuos genotipados sobre la precisión del GEBV para el carácter tiempo de floración en el arroz. Para ello, se realizó un estudio de simulación a partir del uso del módulo `SeqBreed` [@pérez-enciso2020] del lenguaje de programación `Python`[@Python].

Cada uno de los pasos llevados a cabo en dicho estudio de simulación los describiré a continuación (@fig-seqbreed).

```{r}
#| label: paquetes
#| eval: true
#| echo: false

pacman::p_load(here, tidyverse, ggforce, reticulate, ggrepel, patchwork, gt)
```

```{r}
#| label: fig-seqbreed
#| eval: true
#| echo: false
#| out-width: '74%'
#| fig-align: 'center'
#| fig-cap: 'Esquema de predicción usando simulación con el paquete SeqBreed.'

Puntos <- data.frame(x = c(8.2, 11.8, 13.4, 14.8, 11.4), y = c(8.2, 8.2, 3.35, -0.25, -6.6))

data.frame(
  x = 10.0, y = -7.8
  ) %>%
  ggplot(aes(x0 = x, y0 = y, r = 0.8)) +
  #geom_blank() +
  annotate(geom = 'rect', xmin = 7.8, xmax = 12.2, ymin = 4.3, ymax = 5.1, colour = 'yellow', fill = 'yellow', alpha = 0.2) +
  annotate(geom = 'text', x = 10.0, y = 4.7, label = 'Población fundadora', size = 4.0, colour = 'black') +
  #annotate(geom = 'text', x = 10.0, y = 4.5, label = '(G, y)', size = 4.4, colour = 'black') +
  
  annotate(geom = 'rect', xmin = 3.6, xmax = 8.0, ymin = 7.2, ymax = 8.0, colour = 'black', fill = 'black', alpha = 0.2) +
  annotate(geom = 'text', x = 5.8, y = 7.6, label = 'Genotipos fundadores', size = 4.0, colour = 'black') +
  geom_curve(x = 5.8, xend = 7.6, y = 6.9, yend = 5.35, arrow = arrow(length = unit(0.1, 'inch')), size = 0.5, color = 'black', curvature = 0.0) +
  
  annotate(geom = 'rect', xmin = 12.0, xmax = 16.4, ymin = 6.4, ymax = 8.0, colour = 'black', fill = 'black', alpha = 0.2) +
  annotate(geom = 'text', x = 14.2, y = 7.6, label = 'Localización de QTN', size = 4.0, colour = 'black') +
  annotate(geom = 'text', x = 14.2, y = 6.8, label = 'y efectos', size = 4.0, colour = 'black') +
  geom_curve(x = 14.2, xend = 12.4, y = 6.1, yend = 5.35, arrow = arrow(length = unit(0.1, 'inch')), size = 0.5, color = 'black', curvature = 0.0) +
  
  geom_curve(x = 10.0, xend = 10.0, y = 4.1, yend = 1.6, arrow = arrow(length = unit(0.1, 'inch')), size = 0.5, color = 'black', curvature = 0.0) +
  geom_curve(x = 10.8, xend = 10.2, y = 2.75, yend = 2.75, arrow = arrow(length = unit(0.1, 'inch')), size = 0.5, color = 'black', curvature = 0.0) +
  annotate(geom = 'rect', xmin = 11.0, xmax = 13.2, ymin = 2.35, ymax = 3.15, colour = 'black', fill = 'black', alpha = 0.2) +
  annotate(geom = 'text', x = 12.1, y = 2.75, label = 'Pedigrí', size = 4.0, colour = 'black') +
  
  annotate(geom = 'rect', xmin = 8.0, xmax = 12.0, ymin = 0.5, ymax = 1.3, colour = 'yellow', fill = 'yellow', alpha = 0.2) +
  annotate(geom = 'text', x = 10.0, y = 0.9, label = 'Población', size = 4.0, colour = 'black') +
  
  geom_curve(x = 10.0, xend = 10.0, y = 0.3, yend = -2.0, arrow = arrow(length = unit(0.1, 'inch')), size = 0.5, color = 'black', curvature = 0.0) +
  geom_curve(x = 10.8, xend = 10.2, y = -0.75, yend = -0.75, arrow = arrow(length = unit(0.1, 'inch')), size = 0.5, color = 'black', curvature = 0.0) +
  annotate(geom = 'rect', xmin = 11.0, xmax = 14.6, ymin = -1.25, ymax = -0.35, colour = 'black', fill = 'black', alpha = 0.2) +
  annotate(geom = 'text', x = 12.8, y = -0.75, label = 'Densidad de SNP', size = 4.0, colour = 'black') +
  
  annotate(geom = 'rect', xmin = 9.6, xmax = 10.8, ymin = -4.0, ymax = -2.2, colour = 'black', fill = 'white') +
  annotate(geom = 'rect', xmin = 10.1, xmax = 10.7, ymin = -3.75, ymax = -2.9, colour = 'cyan', fill = 'cyan', alpha = 0.2) +
  annotate(geom = 'text', x = 9.2, y = -3.1, label = 'Matriz H', size = 4.6, angle = 90, colour = 'black') +
  
  geom_curve(x = 10.0, xend = 10.0, y = -4.2, yend = -6.3, arrow = arrow(length = unit(0.1, 'inch')), size = 0.5, color = 'black', curvature = 0.0) +
  annotate(geom = 'rect', xmin = 9.5, xmax = 10.5, ymin = -7.5, ymax = -6.5, colour = 'black', fill = 'black', alpha = 0.4) +
  annotate(geom = 'rect', xmin = 9.95, xmax = 10.05, ymin = -7.8, ymax = -7.5, colour = 'black', fill = 'black', alpha = 0.7) +
  geom_circle(aes(x0 = x, y0 = y, r = 0.2), colour = 'black', fill = 'black', alpha = 0.7, size = 0.7) +
  annotate(geom = 'rect', xmin = 10.7, xmax = 11.1, ymin = -7.8, ymax = -6.5, colour = 'black', fill = 'black', alpha = 0.2) +
  annotate(geom = 'rect', xmin = 10.85, xmax = 10.95, ymin = -7.5, ymax = -7.3, colour = 'black', fill = 'black', alpha = 0.5) +
  annotate(geom = 'rect', xmin = 10.88, xmax = 10.92, ymin = -6.8, ymax = -6.9, colour = 'black', fill = 'black', alpha = 0.5) +
  annotate(geom = 'text', x = 9.1, y = -7.0, label = 'ssGBLUP', size = 4.6, angle = 90, colour = 'black') +
  annotate(geom = 'text', x = 8.7, y = -7.0, label = 'BLUP', size = 4.6, angle = 90, colour = 'black') +
  
  annotate(geom = 'text', x = 8.2, y = 8.2, label = '1', family = 'gochi', size = 3.8, colour = 'black') +
  annotate(geom = 'text', x = 11.8, y = 8.2, label = '2', family = 'gochi', size = 3.8, colour = 'black') +
  annotate(geom = 'text', x = 13.4, y = 3.35, label = '3', family = 'gochi', size = 3.8, colour = 'black') +
  annotate(geom = 'text', x = 14.8, y = -0.25, label = '4', family = 'gochi', size = 3.8, colour = 'black') +
  annotate(geom = 'text', x = 11.4, y = -6.6, label = '5', family = 'gochi', size = 3.8, colour = 'black') +
  geom_point(aes(x = x, y = y), data = Puntos, size = 6, shape = 1, color = 'black') +
  
  scale_x_continuous(limits = c(2.5, 17.5)) +
  scale_y_continuous(limits = c(-8.3, 8.5)) +
  
  theme_bw() +
  theme(axis.text = element_blank(),
        axis.ticks = element_blank(),
        axis.title = element_blank())
```

### 1. Uso de genotipos de la población fundadora

Para simular los datos de fenotipo y de genotipo se usaron los datos con los 100.231 SNP resultantes del control de calidad y que puede descargar en el capítulo donde se describen los datos. Luego, usando las funciones `gg.GFounder()` y `gg.Genome()`, como se puede observar en el código a continuación, se obtuvo un archivo que indicó el número de individuos genotipados o individuos de la población fundadora (451), la ploidía (2) y el número de SNP (100.231).

```{python}
#| label: Paso-1a
#| eval: false

SNP_pos = 'SNP_pos'

Gen_Pob_base = gg.GFounder(vcfFile = vcf_IND, snpFile = SNP_pos)
```

::: codigo
.
:::

```{python}
#| label: Paso-1b
#| eval: false

Gen_caracteristicas = gg.Genome(snpFile = SNPs_pos, mapFile = None, ploidy = Gen_Pob_base.ploidy,  XChr = 'X', YChr = 'Y', MTChr = 'MT')
```

::: codigo
.
:::

### 2. Especificación de la arquitectura genética (SNP causales (QTN) y sus efectos)

Se llevo a cabo inicialmente un estudio de asociación a nivel genómico (GWAS) usando el software `GCTA`[@yang2011], para identificar las regiones genómicas asociadas con el carácter tiempo de floración. A continuación podrá descargar el archivo que resultó al hacer el GWAS, donde se específica el efecto de los QTN y su localización.

::: {.callout appearance="minimal"}
<i class="bi bi-download"></i> [Datos GWAS](datos/gwas.mlma){download="gwas.mlma"}
:::

Posteriomente, con base en el GWAS (@fig-GWAS), se seleccionaron 50 QTN cuyo efecto era proporcional a la varianza aditiva explicada.

```{r}
#| label: fig-GWAS
#| eval: true
#| echo: false
#| out-width: '74%'
#| fig-align: 'center'
#| fig-cap: 'Visualización del GWAS para el carácter tiempo de floración en el arroz.'

res_GWAS <- read_delim(here('datos', 'gwas.mlma')) # Se importa el archivo con los resultados del GWAS.

# Se visualiza los resultados mediante ggplot2 ----

# 1. se calcula la posición acumulada de los SNPs:

vis_GWAS <- res_GWAS %>%
  
  group_by(Chr) %>%
  summarise(Tam_cromosoma = max(bp)) %>% # se calcula el tamaño de los cromosomas.
  
  mutate(Total = cumsum(Tam_cromosoma) - Tam_cromosoma) %>%
  select(-Tam_cromosoma) %>% # Se calcula la posición acumulada de cada cromosoma.
  
  left_join(res_GWAS, ., by = c('Chr' = 'Chr')) %>% # Se adiciona la información anterior al conjunto de datos inicial "res_GWAS".
  
  arrange(Chr, bp) %>%
  mutate(bp_total = bp + Total) # Se adiciona la posición acumulada de cada SNP.

# 2. Se prepara el eje x, debido a que no se quiere mostrar la posición acumulada de los SNPs o bp, sino mostrar el nombre del cromosoma:

eje_x <- vis_GWAS %>%
  group_by(Chr) %>%
  summarise(centro = (max(bp_total) + min(bp_total)) / 2)

# 3. Se hace el gráfico a continuación:

Graf_Manhattan <- ggplot(data = vis_GWAS, aes(x = bp_total, y = -log10(p))) +
  geom_point(aes(colour = as.factor(Chr)), alpha = 0.2, size = 2.4) +
  scale_colour_manual(values = c('cyan', 'green', 'red', 'yellow', 'cyan', 'green', 'red', 'yellow', 'cyan', 'green', 'red', 'yellow')) +
  scale_x_continuous( label = eje_x$Chr, breaks= eje_x$centro ) +
  labs(x = 'Cromosoma', y = '-log10(p)') +
  theme_bw() +
  theme(
    legend.position = 'none',
    axis.text = element_text(size = 10),
    axis.title = element_text(size = 11, face = 'bold')
    ) # Nota: 

gg_qqplot <- function(ps, ci = 0.95) {
  n  <- length(ps)
  df <- data.frame(
    observed = -log10(sort(ps)),
    expected = -log10(ppoints(n)),
    clower   = -log10(qbeta(p = (1 - ci) / 2, shape1 = 1:n, shape2 = n:1)),
    cupper   = -log10(qbeta(p = (1 + ci) / 2, shape1 = 1:n, shape2 = n:1))
  )
  log10Pe <- expression(paste('Expected -log'[10], plain(P)))
  log10Po <- expression(paste('Observed -log'[10], plain(P)))
  ggplot(df) +
    geom_ribbon(
      mapping = aes(x = expected, ymin = clower, ymax = cupper),
      alpha = 0.2, fill = 'yellow'
    ) +
    geom_abline(intercept = 0, slope = 1, alpha = 1.0, size = 1.0) +
    geom_point(aes(expected, observed), colour = 'yellow', alpha = 0.5, size = 2.6) +
    xlab(log10Pe) +
    ylab(log10Po)
  }

Graf_qq <- gg_qqplot(res_GWAS$p) +
  labs(x = '-log10(P) esperado', y = '-log10(P) observado') +
  theme_bw() +
  theme(
    axis.text = element_text(size = 10),
    axis.title = element_text(size = 11, face = 'bold')
    )

Graf_QTN <- res_GWAS %>%
  mutate(Chr = as.factor(Chr)) %>%
  ggplot(data = ., aes(x = Chr, y = bp, label = SNP)) +
  geom_point(colour = 'cyan', fill = 'cyan', alpha = 0.4, size = 1.4) +
  #geom_point(data = QTNs, aes(x = Chr, y = bp), colour = 'black', fill = 'white', alpha = 0.6, size = 3.0) +
  labs(x = 'Cromosomas', y = 'Posición (pb)') +
  theme_bw() +
  theme(
    axis.text = element_text(size = 14, face = 'bold'),
    axis.title = element_text(size = 15, face = 'bold')
    ) +
  geom_label_repel(
    size = 5.4,
    colour = 'black',
    box.padding = 0.7
    )

(Graf_Manhattan / Graf_qq) #-> GWAS
```

A continuación podrá descargar los 50 QTN seleccionados.

::: {.callout appearance="minimal"}
<i class="bi bi-download"></i> [Datos QTN](datos/QTN.txt){download="QTN.txt"}
:::

Por último, se usó la función `gg.QTNs()` sobre estos datos generados, indicando también la heredabilidad del carácter (0.7) de acuerdo a resultados previamente reportados [@Vourlakietal].

```{python}
#| label: Paso-2
#| eval: false

QTN = 'QTN.txt'

QTNs = gg.QTNs(h2 = [0.7], genome = Gen_caracteristicas, qtnFile = QTN)
```

::: codigo
.
:::

### 3. Generación de pedigríes

Inicialmente, se generaron cuatro pedigríes, cada uno de ellos con esquemas de cruzamiento diferentes partiendo de la población fundadora con 451 individuos.

```{r}
#| label: Paso-3a
#| eval: true
#| echo: false

tribble(
  ~' ', ~'Pedigrí 1', ~'Pedigri 2', ~'Pedigrí 3', ~'Pedigrí 4',
  'F0', '451', '451', '451', '451',
  'F1', '10', '20', '40', '80',
  'F2', '800 (10x80)', '800 (20x40)', '800 (40x20)', '800 (80x10)',
  'F3', '800 (800x1)', '800 (800x1)', '800 (800x1)', '800 (800x1)',
  'Total', '2.061', '2.071', '2.091', '2.131'
  ) %>%
  gt() %>%
   tab_footnote(
    footnote = '10 indica el número de descendientes que tendrían los 451 individuos de la generación F0 mediante cruzamiento.',
    locations = cells_body(columns = 'Pedigrí 1', rows = 2)
  ) %>%
   tab_footnote(
    footnote = '10x80 indica el número de descendientes (80) que tendrían cada uno de los 10 individuos de la generación F1 por autofecundación, dando un total de 800 individuos en la generación F2.',
    locations = cells_body(columns = 'Pedigrí 1', rows = 3)
  ) %>%
   tab_footnote(
    footnote = '800x1 indica el número de descendientes (1) que tendrían cada uno de los 800 individuos de la generación F2 por autofecundación, dando un total de 800 individuos en la generación F3.',
    locations = cells_body(columns = 'Pedigrí 1', rows = 4)
  )
```

A continuación podrá descargar los cuatro pedigríes generados.

::: {.callout appearance="minimal"}
<i class="bi bi-download"></i> [Pedigrí 1](datos/Pedigri_1.txt){download="Pedigri_1.txt"}   [Pedigrí 2](datos/Pedigri_2.txt){download="Pedigri_2.txt"}   [Pedigrí 3](datos/Pedigri_3.txt){download="Pedigri_3.txt"}   [Pedigrí 4](datos/Pedigri_4.txt){download="Pedigri_4.txt"}
:::

Posteriormente, se generó mediante simulación utilizando la función `gg.Population()`, los fenotipos y genotipos de cada uno de los individuos de los cuatro pedigríes anteriores.

```{python}
#| label: Paso-3b
#| eval: false

Pedigri_1 = 'Pedigri_1.txt'

Pob_1 = gg.Population(Gen_caracteristicas, pedFile = Pedigri_1, generation = None, qtns = QTNs, gfounders = Gen_Pob_base)
```

::: codigo
.
:::

::: aclaracion
.
:::

### 4. Uso de subconjuntos de datos con diferentes densidades de SNP

Del conjunto de datos total con 100.231 SNP luego del control de calidad, se seleccionaron de forma aleatoria mediante el uso de Plink [@purcell2007], tres subconjuntos de datos de SNP de manera que el número de marcadores aproximado fuera igual a 1.000, 10.000 y 100.000 SNP. A continuación podrá descargar los subconjuntos de datos de SNP.

::: {.callout appearance="minimal"}
<i class="bi bi-download"></i> [Chip 1](datos/chip_1.txt){download="chip_1.txt"}   [Chip 2](datos/chip_2.txt){download="chip_2.txt"}   [Chip 3](datos/chip_3.txt){download="chip_3.txt"}
:::

```{python}
#| label: Paso-4a
#| eval: false

den_chips = ['/chip_1.txt', '/chip_2.txt', '/chip_3.txt', SNP_pos]

chips = []
for file in den_chips:
    chip = gg.Chip(chipFile = file, genome = Gen_caracteristicas, name = file + '_chip')
    chips.append(chip)
```

::: codigo
.
:::

### 5. Implementación de los métodos BLUP y ssGBLUP

Se usó la función `sel.doEbv()` para llevar a cabo la predicción, usando los modelos BLUP y ssGBLUP descritos anteriormente en el capítulo sobre Modelos de predicción. A continuación podrá observar todo el código que se utilizó.

```{python}
#| label: Paso-4b
#| eval: false

ind_gen_1 = np.arange(2091, dtype = np.int)

ind_fen = np.arange(461, dtype = np.int)

itrait = 0
```

::: codigo
.
:::

#### 5.1. Método BLUP

```{python}
#| label: Paso-4c
#| eval: false

sel.doEbv(Pob_1, criterion = 'blup', yIds = ind_fen, h2 = 0.7, itrait = itrait)

ebv_aBLUP = np.array(list(Pob_1.inds[i].ebv for i in range(Pob_1.n)))
ebv_aBLUP = pd.DataFrame(ebv_aBLUP)

y_aBLUP = np.array(list(Pob_1.inds[i].y[itrait] for i in range(Pob_1.n)))
y_aBLUP = pd.DataFrame(y_aBLUP)
```

A continuación podrá descargar los fenotipos observados y predichos usando el método BLUP.

::: {.callout appearance="minimal"}
<i class="bi bi-download"></i> [Fenotipos observados](datos/Fenotipo_0.csv){download="Fenotipo_0.csv"}   [Fenotipos predichos](datos/ebv_0.csv){download="ebv_0.csv"}
:::

::: codigo
.
:::

#### 5.2. Método ssGBLUP con densidad de SNP aproximada de 1.000

```{python}
#| label: Paso-4d
#| eval: false

mX_1 = gg.do_X([Pob_1.inds[i] for i in ind_gen_1], Gen_caracteristicas, Gen_Pob_base, chips[0], minMaf = 0.05)

sel.doEbv(Pob_1, criterion = 'sstep', X = mX_1, yIds = ind_fen, mkrIds = ind_gen_1, h2 = 0.7, nh = Gen_caracteristicas.ploidy)

ebv_ssGBLUP = np.array(list(Pob_1.inds[i].ebv for i in range(Pob_1.n)))
ebv_ssGBLUP = pd.DataFrame(ebv_ssGBLUP_3)

y_ssGBLUP = np.array(list(Pob_1.inds[i].y[itrait] for i in range(Pob_1.n)))
y_ssGBLUP = pd.DataFrame(y_ssGBLUP)
```

A continuación podrá descargar los fenotipos observados y predichos usando el método ssGBLUP con densidad de 1.000.

::: {.callout appearance="minimal"}
<i class="bi bi-download"></i> [Fenotipos observados](datos/Fenotipo_1.csv){download="Fenotipo_1.csv"}   [Fenotipos predichos](datos/ebv_1.csv){download="ebv_1.csv"}
:::

::: codigo
.
:::

#### 5.3. Método ssGBLUP con densidad de SNP aproximada de 10.000

```{python}
#| label: Paso-4e
#| eval: false

mX_2 = gg.do_X([Pob_1.inds[i] for i in ind_gen_1], Gen_caracteristicas, Gen_Pob_base, chips[1], minMaf = 0.05)

sel.doEbv(Pob_1, criterion = 'sstep', X = mX_2, yIds = ind_fen, mkrIds = ind_gen_1, h2 = 0.7, nh = Gen_caracteristicas.ploidy)

ebv_ssGBLUP = np.array(list(Pob_1.inds[i].ebv for i in range(Pob_1.n)))
ebv_ssGBLUP = pd.DataFrame(ebv_ssGBLUP_3)

y_ssGBLUP = np.array(list(Pob_1.inds[i].y[itrait] for i in range(Pob_1.n)))
y_ssGBLUP = pd.DataFrame(y_ssGBLUP)
```

A continuación podrá descargar los fenotipos observados y predichos usando el método ssGBLUP con densidad de 10.000.

::: {.callout appearance="minimal"}
<i class="bi bi-download"></i> [Fenotipos observados](datos/Fenotipo_2.csv){download="Fenotipo_2.csv"}   [Fenotipos predichos](datos/ebv_2.csv){download="ebv_2.csv"}
:::

#### 5.4. Método ssGBLUP con densidad de SNP aproximada de 100.000

```{python}
#| label: Paso-4f
#| eval: false

mX_3 = gg.do_X([Pob_1.inds[i] for i in ind_gen_1], Gen_caracteristicas, Gen_Pob_base, chips[2], minMaf = 0.05)

sel.doEbv(Pob_1, criterion = 'sstep', X = mX_3, yIds = ind_fen, mkrIds = ind_gen_1, h2 = 0.7, nh = Gen_caracteristicas.ploidy)

ebv_ssGBLUP = np.array(list(Pob_1.inds[i].ebv for i in range(Pob_1.n)))
ebv_ssGBLUP = pd.DataFrame(ebv_ssGBLUP_3)

y_ssGBLUP = np.array(list(Pob_1.inds[i].y[itrait] for i in range(Pob_1.n)))
y_ssGBLUP = pd.DataFrame(y_ssGBLUP)
```

A continuación podrá descargar los fenotipos observados y predichos usando el método ssGBLUP con densidad de 100.000.

::: {.callout appearance="minimal"}
<i class="bi bi-download"></i> [Fenotipos observados](datos/Fenotipo_3.csv){download="Fenotipo_3.csv"}   [Fenotipos predichos](datos/ebv_3.csv){download="ebv_3.csv"}
:::

Por último, se usó la correlación entre los valores fenotípicos observados y predichos como medida de predictibilidad, resultados que podrá observar a continuación.

```{r}
#| label: Paso-4g
#| eval: true
#| echo: false
#| fig-align: center
#| message: false
#| out-width: '74%'

#############################################################
# Individuos de la generación F2 como conjuntos de validación
#############################################################

# 1. Se importan los datos ----

#############
# Método BLUP
#############

chip_0_a <- read_delim(here('datos', 'Fenotipo_0.csv'), delim = ',', col_names = FALSE) %>%
  rename('Observado' = 'X1') %>%
  slice(-1)

chip_0_b <- read_delim(here('datos', 'ebv_0.csv'), delim = ',', col_names = FALSE) %>%
  rename('Predicho' = 'X1') %>%
  slice(-1)

chip_0 <- bind_cols(chip_0_a, chip_0_b) %>%
  mutate(
    Densidad = '0',
    Método = 'BLUP'
    ) %>%
  slice(462:1261)

######################################
# Método ssGBLUP con densidad de 1.000
######################################

chip_1_a <- read_delim(here('datos', 'Fenotipo_1.csv'), delim = ',', col_names = FALSE) %>%
  rename('Observado' = 'X1') %>%
  slice(-1)

chip_1_b <- read_delim(here('datos', 'ebv_1.csv'), delim = ',', col_names = FALSE) %>%
  rename('Predicho' = 'X1') %>%
  slice(-1)

chip_1 <- bind_cols(chip_1_a, chip_1_b) %>%
  mutate(Densidad = '1.000',
    Método = 'ssGBLUP'
    ) %>%
  slice(462:1261)

#######################################
# Método ssGBLUP con densidad de 10.000
#######################################

chip_2_a <- read_delim(here('datos', 'Fenotipo_2.csv'), delim = ',', col_names = FALSE) %>%
  rename('Observado' = 'X1') %>%
  slice(-1)

chip_2_b <- read_delim(here('datos', 'ebv_2.csv'), delim = ',', col_names = FALSE) %>%
  rename('Predicho' = 'X1') %>%
  slice(-1)

chip_2 <- bind_cols(chip_2_a, chip_2_b) %>%
  mutate(Densidad = '10.000',
    Método = 'ssGBLUP'
    ) %>%
  slice(462:1261)

########################################
# Método ssGBLUP con densidad de 100.000
########################################

chip_3_a <- read_delim(here('datos', 'Fenotipo_3.csv'), delim = ',', col_names = FALSE) %>%
  rename('Observado' = 'X1') %>%
  slice(-1)

chip_3_b <- read_delim(here('datos', 'ebv_3.csv'), delim = ',', col_names = FALSE) %>%
  rename('Predicho' = 'X1') %>%
  slice(-1)

chip_3 <- bind_cols(chip_3_a, chip_3_b) %>%
  mutate(Densidad = '100.000',
    Método = 'ssGBLUP'
    ) %>%
  slice(462:1261)

# 2. Se unen todo los datos ----

chips <- bind_rows(chip_0, chip_1, chip_2, chip_3)

# 3. Se realiza el gráfico con los resultados ----

chips %>%
  group_by(Densidad, Método) %>%
  summarise(Correlación = round(cor(Predicho, Observado), digits =  2)) %>%
  ggplot(data = ., aes(x = Método, y = Correlación, fill = Densidad, colour = Densidad)) +
  geom_col(position = position_dodge(width = 0.7), width = 0.6, alpha = 0.4) +
  annotate(geom = 'text', x = 1.0, y = 0.76, label = '0.69', size = 3.8, colour = 'black') +
  annotate(geom = 'text', x = 1.76, y = 0.76, label = '0.69', size = 2.8, colour = 'black', angle = 45) +
  annotate(geom = 'text', x = 2.0, y = 0.77, label = '0.70', size = 2.8, colour = 'black', angle = 45) +
  annotate(geom = 'text', x = 2.24, y = 0.79, label = '0.72', size = 2.8, colour = 'black', angle = 45) +
  scale_y_continuous(limits = c(0.0, 1.0)) +
  labs(title = 'Predicción en la generación F2', y = 'Precisión de la predicción', x = 'Método de predicción') +
  scale_colour_manual(values = c('black', 'yellow', 'cyan', 'red')) +
  scale_fill_manual(values = c('black', 'yellow', 'cyan', 'red')) +
  theme_bw() +
  theme(
    axis.text = element_text(size = 10),
    axis.title = element_text(size = 10, face = 'bold'),
    legend.title = element_text(size = 10, face = 'bold'),
    legend.text = element_text(size = 10),
    title = element_text(size = 8, face = 'bold')
    ) -> Cor_F2

#############################################################
# Individuos de la generación F3 como conjuntos de validación
#############################################################

# 1. Se importan los datos ----

#############
# Método BLUP
#############

chip_0 <- bind_cols(chip_0_a, chip_0_b) %>%
  mutate(
    Densidad = '0',
    Método = 'BLUP'
    ) %>%
  slice(1262:2061)

######################################
# Método ssGBLUP con densidad de 1.000
######################################

chip_1 <- bind_cols(chip_1_a, chip_1_b) %>%
  mutate(Densidad = '1.000',
    Método = 'ssGBLUP'
    ) %>%
  slice(1262:2061)

#######################################
# Método ssGBLUP con densidad de 10.000
#######################################

chip_2 <- bind_cols(chip_2_a, chip_2_b) %>%
  mutate(Densidad = '10.000',
    Método = 'ssGBLUP'
    ) %>%
  slice(1262:2061)

########################################
# Método ssGBLUP con densidad de 100.000
########################################

chip_3 <- bind_cols(chip_3_a, chip_3_b) %>%
  mutate(Densidad = '100.000',
    Método = 'ssGBLUP'
    ) %>%
  slice(1262:2061)

# 2. Se unen todo los datos ----

chips <- bind_rows(chip_0, chip_1, chip_2, chip_3)

# 3. Se realiza el gráfico con los resultados ----

chips %>%
  group_by(Densidad, Método) %>%
  summarise(Correlación = round(cor(Predicho, Observado), digits =  2)) %>%
  ggplot(data = ., aes(x = Método, y = Correlación, fill = Densidad, colour = Densidad)) +
  geom_col(position = position_dodge(width = 0.7), width = 0.6, alpha = 0.4) +
  annotate(geom = 'text', x = 1.0, y = 0.76, label = '0.69', size = 3.8, colour = 'black') +
  annotate(geom = 'text', x = 1.76, y = 0.76, label = '0.69', size = 2.8, colour = 'black', angle = 45) +
  annotate(geom = 'text', x = 2.0, y = 0.77, label = '0.70', size = 2.8, colour = 'black', angle = 45) +
  annotate(geom = 'text', x = 2.24, y = 0.79, label = '0.72', size = 2.8, colour = 'black', angle = 45) +
  scale_y_continuous(limits = c(0.0, 1.0)) +
  labs(title = 'Predicción en la generación F3', y = 'Precisión de la predicción', x = 'Método de predicción') +
  scale_colour_manual(values = c('black', 'yellow', 'cyan', 'red')) +
  scale_fill_manual(values = c('black', 'yellow', 'cyan', 'red')) +
  theme_bw() +
  theme(
    axis.text = element_text(size = 10),
    axis.title = element_text(size = 10, face = 'bold'),
    legend.title = element_text(size = 10, face = 'bold'),
    legend.text = element_text(size = 10),
    title = element_text(size = 8, face = 'bold')
    ) -> Cor_F3

Cor_F2_F3 <- Cor_F2 + Cor_F3 & theme(legend.position = 'bottom')
Cor_F2_F3 + plot_layout(guides = 'collect')
```

::: aclaracion
.
:::

### Referencia bibliográfica
