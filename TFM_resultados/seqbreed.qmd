---
execute: 
  warning: false
  message: false
bibliography: references.bib
---

## Precisión de la predición mediante simulación con SeqBreed {.unnumbered}

Hoy en día, los métodos de predicción genómica se usan ampliamente en la mejora genética de plantas y de animales. Antes de que estos métodos sean implementados en escenarios prácticos, es importante conocer su precisión al predecir el valor de cría estimado (EBV, o GEBV al realizar la predicción utilizando SNP). En este sentido, el objetivo principal de mi trabajo de grado consistió en estudiar el efecto del número de marcadores (SNP) y de individuos genotipados sobre la precisión del GEBV para el carácter tiempo de floración en el arroz. Para ello, se realizó un estudio de simulación a partir del uso del módulo `SeqBreed` [@pérez-enciso2020] del lenguaje de programación `Python`[@Python].

Cada uno de los pasos llevados a cabo en dicho estudio de simulación los describiré a continuación (@fig-seqbreed).

```{r}
#| label: paquetes
#| eval: true
#| echo: false

pacman::p_load(here, tidyverse, ggforce, reticulate, ggrepel, patchwork)
```

```{r}
#| label: fig-seqbreed
#| eval: true
#| echo: false
#| out-width: '74%'
#| fig-align: 'center'
#| fig-cap: 'Esquema de predicción usando simulación con el paquete SeqBreed.'

Puntos <- data.frame(x = c(8.2, 11.8, 13.4, 14.8, 11.4), y = c(8.2, 8.2, 3.35, -0.25, -6.6))

data.frame(
  x = 10.0, y = -7.8
  ) %>%
  ggplot(aes(x0 = x, y0 = y, r = 0.8)) +
  #geom_blank() +
  annotate(geom = 'rect', xmin = 7.8, xmax = 12.2, ymin = 4.3, ymax = 5.1, colour = 'yellow', fill = 'yellow', alpha = 0.2) +
  annotate(geom = 'text', x = 10.0, y = 4.7, label = 'Población fundadora', size = 4.0, colour = 'black') +
  #annotate(geom = 'text', x = 10.0, y = 4.5, label = '(G, y)', size = 4.4, colour = 'black') +
  
  annotate(geom = 'rect', xmin = 3.6, xmax = 8.0, ymin = 7.2, ymax = 8.0, colour = 'black', fill = 'black', alpha = 0.2) +
  annotate(geom = 'text', x = 5.8, y = 7.6, label = 'Genotipos fundadores', size = 4.0, colour = 'black') +
  geom_curve(x = 5.8, xend = 7.6, y = 6.9, yend = 5.35, arrow = arrow(length = unit(0.1, 'inch')), size = 0.5, color = 'black', curvature = 0.0) +
  
  annotate(geom = 'rect', xmin = 12.0, xmax = 16.4, ymin = 6.4, ymax = 8.0, colour = 'black', fill = 'black', alpha = 0.2) +
  annotate(geom = 'text', x = 14.2, y = 7.6, label = 'Localización de QTN', size = 4.0, colour = 'black') +
  annotate(geom = 'text', x = 14.2, y = 6.8, label = 'y efectos', size = 4.0, colour = 'black') +
  geom_curve(x = 14.2, xend = 12.4, y = 6.1, yend = 5.35, arrow = arrow(length = unit(0.1, 'inch')), size = 0.5, color = 'black', curvature = 0.0) +
  
  geom_curve(x = 10.0, xend = 10.0, y = 4.1, yend = 1.6, arrow = arrow(length = unit(0.1, 'inch')), size = 0.5, color = 'black', curvature = 0.0) +
  geom_curve(x = 10.8, xend = 10.2, y = 2.75, yend = 2.75, arrow = arrow(length = unit(0.1, 'inch')), size = 0.5, color = 'black', curvature = 0.0) +
  annotate(geom = 'rect', xmin = 11.0, xmax = 13.2, ymin = 2.35, ymax = 3.15, colour = 'black', fill = 'black', alpha = 0.2) +
  annotate(geom = 'text', x = 12.1, y = 2.75, label = 'Pedigrí', size = 4.0, colour = 'black') +
  
  annotate(geom = 'rect', xmin = 8.0, xmax = 12.0, ymin = 0.5, ymax = 1.3, colour = 'yellow', fill = 'yellow', alpha = 0.2) +
  annotate(geom = 'text', x = 10.0, y = 0.9, label = 'Población', size = 4.0, colour = 'black') +
  
  geom_curve(x = 10.0, xend = 10.0, y = 0.3, yend = -2.0, arrow = arrow(length = unit(0.1, 'inch')), size = 0.5, color = 'black', curvature = 0.0) +
  geom_curve(x = 10.8, xend = 10.2, y = -0.75, yend = -0.75, arrow = arrow(length = unit(0.1, 'inch')), size = 0.5, color = 'black', curvature = 0.0) +
  annotate(geom = 'rect', xmin = 11.0, xmax = 14.6, ymin = -1.25, ymax = -0.35, colour = 'black', fill = 'black', alpha = 0.2) +
  annotate(geom = 'text', x = 12.8, y = -0.75, label = 'Densidad de SNP', size = 4.0, colour = 'black') +
  
  annotate(geom = 'rect', xmin = 9.6, xmax = 10.8, ymin = -4.0, ymax = -2.2, colour = 'black', fill = 'white') +
  annotate(geom = 'rect', xmin = 10.1, xmax = 10.7, ymin = -3.75, ymax = -2.9, colour = 'cyan', fill = 'cyan', alpha = 0.2) +
  annotate(geom = 'text', x = 9.2, y = -3.1, label = 'Matriz H', size = 4.6, angle = 90, colour = 'black') +
  
  geom_curve(x = 10.0, xend = 10.0, y = -4.2, yend = -6.3, arrow = arrow(length = unit(0.1, 'inch')), size = 0.5, color = 'black', curvature = 0.0) +
  annotate(geom = 'rect', xmin = 9.5, xmax = 10.5, ymin = -7.5, ymax = -6.5, colour = 'black', fill = 'black', alpha = 0.4) +
  annotate(geom = 'rect', xmin = 9.95, xmax = 10.05, ymin = -7.8, ymax = -7.5, colour = 'black', fill = 'black', alpha = 0.7) +
  geom_circle(aes(x0 = x, y0 = y, r = 0.2), colour = 'black', fill = 'black', alpha = 0.7, size = 0.7) +
  annotate(geom = 'rect', xmin = 10.7, xmax = 11.1, ymin = -7.8, ymax = -6.5, colour = 'black', fill = 'black', alpha = 0.2) +
  annotate(geom = 'rect', xmin = 10.85, xmax = 10.95, ymin = -7.5, ymax = -7.3, colour = 'black', fill = 'black', alpha = 0.5) +
  annotate(geom = 'rect', xmin = 10.88, xmax = 10.92, ymin = -6.8, ymax = -6.9, colour = 'black', fill = 'black', alpha = 0.5) +
  annotate(geom = 'text', x = 9.1, y = -7.0, label = 'ssGBLUP', size = 4.6, angle = 90, colour = 'black') +
  annotate(geom = 'text', x = 8.7, y = -7.0, label = 'BLUP', size = 4.6, angle = 90, colour = 'black') +
  
  annotate(geom = 'text', x = 8.2, y = 8.2, label = '1', family = 'gochi', size = 3.8, colour = 'black') +
  annotate(geom = 'text', x = 11.8, y = 8.2, label = '2', family = 'gochi', size = 3.8, colour = 'black') +
  annotate(geom = 'text', x = 13.4, y = 3.35, label = '3', family = 'gochi', size = 3.8, colour = 'black') +
  annotate(geom = 'text', x = 14.8, y = -0.25, label = '4', family = 'gochi', size = 3.8, colour = 'black') +
  annotate(geom = 'text', x = 11.4, y = -6.6, label = '5', family = 'gochi', size = 3.8, colour = 'black') +
  geom_point(aes(x = x, y = y), data = Puntos, size = 6, shape = 1, color = 'black') +
  
  scale_x_continuous(limits = c(2.5, 17.5)) +
  scale_y_continuous(limits = c(-8.3, 8.5)) +
  
  theme_bw() +
  theme(axis.text = element_blank(),
        axis.ticks = element_blank(),
        axis.title = element_blank())
```

### 1. Uso de genotipos de la población fundadora

Para simular los datos de fenotipo y de genotipo se usaron los datos con los 100.231 SNP resultantes del control de calidad y que puede descargar en el capítulo donde se describen los datos. Luego, usando las funciones `gg.GFounder()` y `gg.Genome()`, como se puede observar en el código a continuación, se obtuvo un archivo que indicó el número de individuos genotipados o individuos de la población fundadora (451), la ploidía (2) y el número de SNP (100.231).

```{python}
#| label: Paso-1a
#| eval: false

SNPs_pos = 'SNP_pos'

Gen_Pob_base = gg.GFounder(vcfFile = vcf_IND, snpFile = SNP_pos)
```

::: codigo
.
:::

```{python}
#| label: Paso-1b
#| eval: false

Gen_caracteristicas = gg.Genome(snpFile = SNPs_pos, mapFile = None, ploidy = Gen_Pob_base.ploidy,  XChr = 'X', YChr = 'Y', MTChr = 'MT')
```

::: aclaracion
.
:::

### 2. Especificación de la arquitectura genética (SNP causales (QTN) y sus efectos)

Se llevo a cabo inicialmente un estudio de asociación a nivel genómico (GWAS) usando el software `GCTA`[@yang2011], para identificar las regiones genómicas asociadas con el carácter tiempo de floración. A continuación podrá descargar el archivo que resultó al hacer el GWAS, el cual el efecto de los QTN y su localización.

::: {.callout appearance="minimal"}
<i class="bi bi-download"></i> [Datos GWAS](datos/gwas.mlma){download="gwas.mlma"}
:::

Posteriomente, con base en el GWAS (@fig-GWAS), se seleccionaron 50 QTN cuyo efecto era proporcional a la varianza aditiva explicada.

```{r}
#| label: fig-GWAS
#| eval: true
#| echo: false
#| out-width: '74%'
#| fig-align: 'center'
#| fig-cap: 'Visualización del GWAS para el carácter tiempo de floración en el arroz.'

res_GWAS <- read_delim(here('datos', 'gwas.mlma')) # Se importa el archivo con los resultados del GWAS.

# Se visualiza los resultados mediante ggplot2 ----

# 1. se calcula la posición acumulada de los SNPs:

vis_GWAS <- res_GWAS %>%
  
  group_by(Chr) %>%
  summarise(Tam_cromosoma = max(bp)) %>% # se calcula el tamaño de los cromosomas.
  
  mutate(Total = cumsum(Tam_cromosoma) - Tam_cromosoma) %>%
  select(-Tam_cromosoma) %>% # Se calcula la posición acumulada de cada cromosoma.
  
  left_join(res_GWAS, ., by = c('Chr' = 'Chr')) %>% # Se adiciona la información anterior al conjunto de datos inicial "res_GWAS".
  
  arrange(Chr, bp) %>%
  mutate(bp_total = bp + Total) # Se adiciona la posición acumulada de cada SNP.

# 2. Se prepara el eje x, debido a que no se quiere mostrar la posición acumulada de los SNPs o bp, sino mostrar el nombre del cromosoma:

eje_x <- vis_GWAS %>%
  group_by(Chr) %>%
  summarise(centro = (max(bp_total) + min(bp_total)) / 2)

# 3. Se hace el gráfico a continuación:

Graf_Manhattan <- ggplot(data = vis_GWAS, aes(x = bp_total, y = -log10(p))) +
  geom_point(aes(colour = as.factor(Chr)), alpha = 0.2, size = 2.4) +
  scale_colour_manual(values = c('cyan', 'green', 'red', 'yellow', 'cyan', 'green', 'red', 'yellow', 'cyan', 'green', 'red', 'yellow')) +
  scale_x_continuous( label = eje_x$Chr, breaks= eje_x$centro ) +
  labs(x = 'Cromosoma', y = '-log10(p)') +
  theme_bw() +
  theme(
    legend.position = 'none',
    axis.text = element_text(size = 10),
    axis.title = element_text(size = 11, face = 'bold')
    ) # Nota: 

gg_qqplot <- function(ps, ci = 0.95) {
  n  <- length(ps)
  df <- data.frame(
    observed = -log10(sort(ps)),
    expected = -log10(ppoints(n)),
    clower   = -log10(qbeta(p = (1 - ci) / 2, shape1 = 1:n, shape2 = n:1)),
    cupper   = -log10(qbeta(p = (1 + ci) / 2, shape1 = 1:n, shape2 = n:1))
  )
  log10Pe <- expression(paste('Expected -log'[10], plain(P)))
  log10Po <- expression(paste('Observed -log'[10], plain(P)))
  ggplot(df) +
    geom_ribbon(
      mapping = aes(x = expected, ymin = clower, ymax = cupper),
      alpha = 0.2, fill = 'yellow'
    ) +
    geom_abline(intercept = 0, slope = 1, alpha = 1.0, size = 1.0) +
    geom_point(aes(expected, observed), colour = 'yellow', alpha = 0.5, size = 2.6) +
    xlab(log10Pe) +
    ylab(log10Po)
  }

Graf_qq <- gg_qqplot(res_GWAS$p) +
  labs(x = '-log10(P) esperado', y = '-log10(P) observado') +
  theme_bw() +
  theme(
    axis.text = element_text(size = 10),
    axis.title = element_text(size = 11, face = 'bold')
    )

Graf_QTN <- res_GWAS %>%
  mutate(Chr = as.factor(Chr)) %>%
  ggplot(data = ., aes(x = Chr, y = bp, label = SNP)) +
  geom_point(colour = 'cyan', fill = 'cyan', alpha = 0.4, size = 1.4) +
  #geom_point(data = QTNs, aes(x = Chr, y = bp), colour = 'black', fill = 'white', alpha = 0.6, size = 3.0) +
  labs(x = 'Cromosomas', y = 'Posición (pb)') +
  theme_bw() +
  theme(
    axis.text = element_text(size = 14, face = 'bold'),
    axis.title = element_text(size = 15, face = 'bold')
    ) +
  geom_label_repel(
    size = 5.4,
    colour = 'black',
    box.padding = 0.7
    )

(Graf_Manhattan / Graf_qq) #-> GWAS
```

A continuación podrá descargar los 50 QTN seleccionados.

::: {.callout appearance="minimal"}
<i class="bi bi-download"></i> [Datos QTN](datos/QTN.txt){download="QTN.txt"}
:::

Por último, se uso la función `gg.QTNs()` sobre estos datos generados, indicando también la heredabilidad del carácter (0.7) de acuerdo a resultados previamente reportados [@Vourlakietal].

```{python}
#| label: Paso-2
#| eval: false

QTN = 'QTN.txt'

QTN = gg.QTNs(h2 = [0.7], genome = Gen_caracteristicas, qtnFile = QTN)
```

### Referencia bibliográfica
